{"ast":null,"code":"var _jsxFileName = \"/root/MiNS/src/App.js\";\nimport React, { useState, MouseEvent, CSSProperties } from \"react\";\nimport ReactFlow, { removeElements, addEdge, MiniMap, Controls, Background, OnLoadParams, Elements, ElementId, Node, FlowElement, BackgroundVariant, Connection, Edge } from \"react-flow-renderer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst onLoad = reactFlowInstance => console.log(\"flow loaded:\", reactFlowInstance);\n\nconst onElementClick = (_, element) => console.log(\"click\", element);\n\nconst onNodeDragStop = (_, node) => console.log(\"drag stop\", node);\n\nconst buttonStyle = {\n  position: \"absolute\",\n  left: 10,\n  top: 10,\n  zIndex: 4\n};\n\nconst EmptyFlow = () => {\n  const [elements, setElements] = useState < Elements > [];\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onConnect = params => setElements(els => addEdge(params, els));\n\n  const addRandomNode = () => {\n    const nodeId = (elements.length + 1).toString();\n    const newNode = {\n      id: nodeId,\n      data: {\n        label: `Node: ${nodeId}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    };\n    setElements(els => els.concat(newNode));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: elements,\n    onLoad: onLoad,\n    onElementClick: onElementClick,\n    onElementsRemove: onElementsRemove,\n    onConnect: p => onConnect(p),\n    onNodeDragStop: onNodeDragStop,\n    onlyRenderVisibleElements: false,\n    children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Background, {\n      variant: BackgroundVariant.Lines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addRandomNode,\n      style: buttonStyle,\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_c = EmptyFlow;\nexport default EmptyFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmptyFlow\");","map":{"version":3,"sources":["/root/MiNS/src/App.js"],"names":["React","useState","MouseEvent","CSSProperties","ReactFlow","removeElements","addEdge","MiniMap","Controls","Background","OnLoadParams","Elements","ElementId","Node","FlowElement","BackgroundVariant","Connection","Edge","onLoad","reactFlowInstance","console","log","onElementClick","_","element","onNodeDragStop","node","buttonStyle","position","left","top","zIndex","EmptyFlow","elements","setElements","onElementsRemove","elementsToRemove","els","onConnect","params","addRandomNode","nodeId","length","toString","newNode","id","data","label","x","Math","random","window","innerWidth","y","innerHeight","concat","p","Lines"],"mappings":"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","sourcesContent":["import React, { useState, MouseEvent, CSSProperties } from \"react\";\n\nimport ReactFlow, {\n  removeElements,\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  OnLoadParams,\n  Elements,\n  ElementId,\n  Node,\n  FlowElement,\n  BackgroundVariant,\n  Connection,\n  Edge,\n} from \"react-flow-renderer\";\n\nconst onLoad = (reactFlowInstance: OnLoadParams) =>\n  console.log(\"flow loaded:\", reactFlowInstance);\nconst onElementClick = (_: MouseEvent, element: FlowElement) =>\n  console.log(\"click\", element);\nconst onNodeDragStop = (_: MouseEvent, node: Node) =>\n  console.log(\"drag stop\", node);\n\nconst buttonStyle: CSSProperties = {\n  position: \"absolute\",\n  left: 10,\n  top: 10,\n  zIndex: 4,\n};\n\nconst EmptyFlow = () => {\n  const [elements, setElements] = useState < Elements > [];\n  const onElementsRemove = (elementsToRemove: Elements) =>\n    setElements((els) => removeElements(elementsToRemove, els));\n  const onConnect = (params: Connection | Edge) =>\n    setElements((els) => addEdge(params, els));\n  const addRandomNode = () => {\n    const nodeId: ElementId = (elements.length + 1).toString();\n    const newNode: Node = {\n      id: nodeId,\n      data: { label: `Node: ${nodeId}` },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n      },\n    };\n    setElements((els) => els.concat(newNode));\n  };\n\n  return (\n    <ReactFlow\n      elements={elements}\n      onLoad={onLoad}\n      onElementClick={onElementClick}\n      onElementsRemove={onElementsRemove}\n      onConnect={(p) => onConnect(p)}\n      onNodeDragStop={onNodeDragStop}\n      onlyRenderVisibleElements={false}\n    >\n      <MiniMap />\n      <Controls />\n      <Background variant={BackgroundVariant.Lines} />\n\n      <button type=\"button\" onClick={addRandomNode} style={buttonStyle}>\n        add node\n      </button>\n    </ReactFlow>\n  );\n};\n\nexport default EmptyFlow;\n"]},"metadata":{},"sourceType":"module"}